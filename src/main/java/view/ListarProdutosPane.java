package view;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.dao.ProdutoDAOImpl;
import model.entity.Produto;
import model.filter.ProdutoFilter;


public class ListarProdutosPane extends javax.swing.JPanel {

    private final TelaPrincipal telaPrincipal;
    /**
     * Creates new form ListarProdutosPane
     */
    public ListarProdutosPane(TelaPrincipal telaPrincipal) {
        initComponents();
        this.telaPrincipal = telaPrincipal;
        preencherTabela(produtoDAOImpl.findAll());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaProdutos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        inputNomeProduto = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        inputValorProduto = new javax.swing.JTextField();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        tabelaProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOME", "VALOR", "CATEGORIA", "ESTOQUE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaProdutos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaProdutosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaProdutos);
        if (tabelaProdutos.getColumnModel().getColumnCount() > 0) {
            tabelaProdutos.getColumnModel().getColumn(0).setMaxWidth(60);
            tabelaProdutos.getColumnModel().getColumn(1).setMinWidth(130);
            tabelaProdutos.getColumnModel().getColumn(2).setMaxWidth(80);
            tabelaProdutos.getColumnModel().getColumn(4).setMinWidth(100);
        }

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Filtrar Lista");

        jLabel2.setText("Nome do produto:");

        inputNomeProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputNomeProdutoKeyReleased(evt);
            }
        });

        jLabel3.setText("Valor do produto:");

        inputValorProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputValorProdutoKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(inputNomeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inputValorProduto))))
                .addContainerGap(210, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputNomeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputValorProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(41, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tabelaProdutosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaProdutosMouseClicked
        if(evt.getClickCount() == 2) {
            int linhaSelecionada = tabelaProdutos.getSelectedRow();
            if(linhaSelecionada != -1) {
                Long idSelecionado = (Long) tabelaProdutos.getValueAt(linhaSelecionada, 0);
                telaPrincipal.ativarEdicaoProduto(idSelecionado);
            }
        }
    }//GEN-LAST:event_tabelaProdutosMouseClicked

    private void inputNomeProdutoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputNomeProdutoKeyReleased
        buscaFiltrada();
    }//GEN-LAST:event_inputNomeProdutoKeyReleased

    private void inputValorProdutoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputValorProdutoKeyReleased
        buscaFiltrada();
    }//GEN-LAST:event_inputValorProdutoKeyReleased


    private void buscaFiltrada() {
        try {
            String nomeProduto = inputNomeProduto.getText();
            ProdutoFilter produtoFilter = new ProdutoFilter();
            if (nomeProduto.isEmpty() && !inputValorProduto.getText().isEmpty()) {
                System.out.println("Apenas nome");
                produtoFilter = new ProdutoFilter(Float.valueOf(inputValorProduto.getText().replace(",", ".")));
            } else if(inputValorProduto.getText().isEmpty() && !nomeProduto.isEmpty()) {
                System.out.println("Apenas valor");
                produtoFilter = new ProdutoFilter(nomeProduto);
            } else if(!nomeProduto.isEmpty() && !inputValorProduto.getText().isEmpty()) {
                System.out.println("Todos dois");
                produtoFilter = new ProdutoFilter(nomeProduto, Float.valueOf(inputValorProduto.getText().replace(",", ".")));
            }

             List<Produto> listaFiltrada = produtoDAOImpl.findWithFilter(produtoFilter);
             preencherTabela(listaFiltrada);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Informe um número válido no campo de valor do produto.", "ERRO: Número inválido", JOptionPane.ERROR_MESSAGE);
        }
            
    }
    
    private void preencherTabela(List<Produto> lista) {
        DefaultTableModel model = (DefaultTableModel) tabelaProdutos.getModel();
        model.setRowCount(0);
        for (Produto produto: lista) {
            model.addRow(new Object[] {produto.getId(), produto.getNome(), produto.getValor(), produto.getCategoria(), produto.getQtd_estoque()});
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField inputNomeProduto;
    private javax.swing.JTextField inputValorProduto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTable tabelaProdutos;
    // End of variables declaration//GEN-END:variables
    private final ProdutoDAOImpl produtoDAOImpl = new ProdutoDAOImpl();
}
